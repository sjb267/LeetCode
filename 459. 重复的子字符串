给定一个非空的字符串 s ，检查是否可以通过由它的一个子串重复多次构成。

 

示例 1:

输入: s = "abab"
输出: true
解释: 可由子串 "ab" 重复两次构成。
示例 2:

输入: s = "aba"
输出: false
示例 3:

输入: s = "abcabcabcabc"
输出: true
解释: 可由子串 "abc" 重复四次构成。 (或子串 "abcabc" 重复两次构成。)


// 双倍字符串方法

bool repeatedSubstringPattern(string s) {
    return(s+s).find(s, 1) != s.size();
}

// kmp算法

void buildnext(int next[], string s) { //计算next数组
    int n = s.size();
    int i=1;
    int j=0;
    next[0] = 0;
    while(i < n){
        if(s[j] == s[i]) {
            j++;
            next[i++] = j;
        }
        else {
            if(j == 0) {
                next[i++] = 0;
            }
            else {
                j = next[j-1];
            }
        }
    }
}

bool repeatedSubstringPattern(string s) {
    int n = s.size();
    int next[n];
    buildnext(next, s);
    if(next[n-1] == 0) { //为0直接为false
        return false;
    }
    return n % (n - next[n-1]) == 0; //这题的精髓
}
