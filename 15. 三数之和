给你一个整数数组 nums ，判断是否存在三元组 [nums[i], nums[j], nums[k]] 满足 i != j、i != k 且 j != k ，同时还满足 nums[i] + nums[j] + nums[k] == 0 。请

你返回所有和为 0 且不重复的三元组。

注意：答案中不可以包含重复的三元组。


示例 1：

输入：nums = [-1,0,1,2,-1,-4]
输出：[[-1,-1,2],[-1,0,1]]
解释：
nums[0] + nums[1] + nums[2] = (-1) + 0 + 1 = 0 。
nums[1] + nums[2] + nums[4] = 0 + 1 + (-1) = 0 。
nums[0] + nums[3] + nums[4] = (-1) + 2 + (-1) = 0 。
不同的三元组是 [-1,0,1] 和 [-1,-1,2] 。
注意，输出的顺序和三元组的顺序并不重要。
示例 2：

输入：nums = [0,1,1]
输出：[]
解释：唯一可能的三元组和不为 0 。
示例 3：

输入：nums = [0,0,0]
输出：[[0,0,0]]
解释：唯一可能的三元组和为 0 。




//使用双指针

vector<vector<int>> threeSum(vector<int>& nums) {
        vector<vector<int>> ans;
        sort(nums.begin(), nums.end()); //数组先进行排序
        int right = nums.size()-1;
        for(int i = 0; i < right-1; i++) {
            if(nums[i] > 0) { // 由于大于0,的后面的指针无论怎样加都是大于0的
                return ans;
            }
            if(i > 0 && nums[i] == nums[i-1]) { //也是去掉i重复的情况
                continue;
            }
            int left = i+1;  //left指针都在i的右边
            int right = nums.size()-1; //right指针都在数组最后边
            while(right > left) {
                if(nums[i] + nums[left] + nums[right] < 0) {
                    left++;
                }
                else if(nums[i] + nums[left] + nums[right] > 0) {
                    right--;
                }
                else {
                    ans.push_back(vector<int>{nums[i],nums[left],nums[right]});
                    while (right > left && nums[right] == nums[right - 1]) right--; //去掉重复的情况
                    while (right > left && nums[left] == nums[left + 1]) left++; //去掉重复的情况
                    //指针同时走
                    right--;
                    left++;
                }
            }
        }
        return ans;
    }
