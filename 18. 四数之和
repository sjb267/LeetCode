给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：

0 <= a, b, c, d < n
a、b、c 和 d 互不相同
nums[a] + nums[b] + nums[c] + nums[d] == target
你可以按 任意顺序 返回答案 。

 

示例 1：

输入：nums = [1,0,-1,0,-2,2], target = 0
输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]
示例 2：

输入：nums = [2,2,2,2,2], target = 8
输出：[[2,2,2,2]]



vector<vector<int>> fourSum(vector<int>& nums, int target) {
        vector<vector<int>> ans;
        if (nums.size() < 4) {
            return ans;
        }
        sort(nums.begin(), nums.end()); // 将数组进行排序
        for(int i=0; i<nums.size()-3; i++) { //for循环两次，将两个数字相加
            if(nums[i] >= 0 && nums[i] > target) { //剪枝
                break;
            }
            if(i > 0 && nums[i] == nums[i-1]) { //去重i
                continue;
            }
            for(int j=i+1; j<nums.size()-2; j++) {
                if(nums[i]+nums[j] >= 0 && nums[i]+nums[j] > target) { //剪枝
                    break;
                }
                if(j > i+1 && nums[j] == nums[j-1]) { //去重j
                    continue;
                }
                int left = j+1; //双指针 left指针在j+1序列，right则在数组最后。
                int right = nums.size()-1;
                while (left < right) { // 这里三数之和类似
                    if ((long)nums[i] + nums[j] + nums[left] + nums[right] > target) {
                        right--;
                    }
                    else if ((long)nums[i] + nums[j] + nums[left] + nums[right] < target) {
                        left++;
                    }
                    else {
                        ans.push_back(vector<int>{nums[i],nums[j],nums[left],nums[right]});
                        while (left < right && nums[left] == nums[left+1]) {
                            left++;
                        }
                        while (left < right && nums[right] == nums[right-1]) {
                            right--;
                        }
                        left++;
                        right--;
                    }
                }
            }
        }
        return ans;
    }
