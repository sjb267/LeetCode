给你四个整数数组 nums1、nums2、nums3 和 nums4 ，数组长度都是 n ，请你计算有多少个元组 (i, j, k, l) 能满足：

0 <= i, j, k, l < n
nums1[i] + nums2[j] + nums3[k] + nums4[l] == 0    
 

示例 1：

输入：nums1 = [1,2], nums2 = [-2,-1], nums3 = [-1,2], nums4 = [0,2]
输出：2
解释：
两个元组如下：
1. (0, 0, 0, 1) -> nums1[0] + nums2[0] + nums3[0] + nums4[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> nums1[1] + nums2[1] + nums3[0] + nums4[0] = 2 + (-1) + (-1) + 0 = 0
示例 2：

输入：nums1 = [0], nums2 = [0], nums3 = [0], nums4 = [0]
输出：1



// 首先使用哈希表(unordered_map：key为循环两个数组nums1和nums2，将他们所有的加起来的结果、value为结果的次数)
// 循环了nums1和nums2之后再循环nums3和nums4，也是将它们的结果加起来之后再将结果都变成负值与哈希表对应，若有则则减少哈希表里对应key的次数，并计数(count++)，返回count。


int fourSumCount(vector<int>& nums1, vector<int>& nums2, vector<int>& nums3, vector<int>& nums4) {
    unordered_map<int,int> hash;
    int count = 0;
    for(int a : nums1) {
        for(int b : nums2) {
            hash[a + b]++;
        }
    }
    for(int c : nums3) {
        for(int d : nums4) {
            if(hash.find(0-(c+d)) != hash.end()) {
                count += hash[0-(c+d)];
            }
        }
    }
    return count;
}
