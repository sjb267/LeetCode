给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。

你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。

你可以按任意顺序返回答案。

 

示例 1：

输入：nums = [2,7,11,15], target = 9
输出：[0,1]
解释：因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。
示例 2：

输入：nums = [3,2,4], target = 6
输出：[1,2]
示例 3：

输入：nums = [3,3], target = 6
输出：[0,1]

// 使用哈希表（unordered_map:key为数组里的值，value为对应的下标（由于我们要返回下标）） 
// 遍历数组，先得出target-数组nums里的值（比如9 - 2 = 7)，将7与哈希表对应，若没有则将2放入和2的下标


vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int, int> hash;
        vector<int> ans;
        for(int i=0; i<nums.size(); i++) {
            int temp = target - nums[i];
            if(hash.find(temp) == hash.end()) {
                hash.emplace(nums[i], i);
            }
            else{
                ans.push_back(i);
                ans.push_back(hash[temp]);
                return ans;
            }
        }
        return ans;
    }
