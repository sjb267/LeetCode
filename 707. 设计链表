class MyLinkedList {
public:
    struct LinkedNode{
        int val;
        LinkedNode *next;
        LinkedNode(int val):val(val), next(nullptr){}
    };

    MyLinkedList() {
        _dummyHead = new LinkedNode(0);
        _size = 0;
    }
    
    int get(int index) {
        if(index > (_size-1) || index < 0) {
            return -1;
        }
        LinkedNode *p = _dummyHead->next;
        while(index--) {
            p = p->next;
        }
        return p->val;
    }
    
    void addAtHead(int val) {
        LinkedNode *p = new LinkedNode(val);
        p->next = _dummyHead->next;
        _dummyHead->next = p;
        _size++;
    }
    
    void addAtTail(int val) {
        LinkedNode *p = new LinkedNode(val);
        LinkedNode *q = _dummyHead;
        while(q->next != NULL) {
            q = q->next;
        }
        q->next = p;
        _size++;
    }
    
    void addAtIndex(int index, int val) {
        if(_size < index) {
            return;
        }
        LinkedNode *p = new LinkedNode(val);
        LinkedNode *q = _dummyHead;
        while(index--) {
            q = q->next;
        }
        p->next = q->next;
        q->next = p;
        _size++;
    }
    
    void deleteAtIndex(int index) {
        if(index > (_size-1) || index < 0) {
            return;
        }
        LinkedNode *p = _dummyHead;
        while(index--) {
            p = p->next;
        }
        LinkedNode *q = p->next;
        p->next = q->next;
        delete q;
        _size--;
    }
private:
    LinkedNode *_dummyHead;
    int _size;
};

/**
 * Your MyLinkedList object will be instantiated and called as such:
 * MyLinkedList* obj = new MyLinkedList();
 * int param_1 = obj->get(index);
 * obj->addAtHead(val);
 * obj->addAtTail(val);
 * obj->addAtIndex(index,val);
 * obj->deleteAtIndex(index);
 */
