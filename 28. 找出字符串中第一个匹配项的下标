给你两个字符串 haystack 和 needle ，请你在 haystack 字符串中找出 needle 字符串的第一个匹配项的下标（下标从 0 开始）。如果 needle 不是 haystack 的一部分，则返回  -1 。

 

示例 1：

输入：haystack = "sadbutsad", needle = "sad"
输出：0
解释："sad" 在下标 0 和 6 处匹配。
第一个匹配项的下标是 0 ，所以返回 0 。
示例 2：

输入：haystack = "leetcode", needle = "leeto"
输出：-1
解释："leeto" 没有在 "leetcode" 中出现，所以返回 -1 。
 

提示：

1 <= haystack.length, needle.length <= 104
haystack 和 needle 仅由小写英文字符组成


// 我的解法
// 直接取出字符串里的字串一一进行匹配，复杂度（n*m)
int strStr(string haystack, string needle) {
    int n = haystack.size();
    int m = needle.size();
    if(m > n) {
        return -1;
    }
    for(int i=m-1; i<n; i++) {
        if(needle == haystack.substr(i-m+1, m)) {
            return i-m+1;
        }
    }
    return -1;
}

// kmp算法
void buildNext(vector<int> &next, string s) {
        int n = s.size();
        next[0] = 0;
        if(n < 1) {
            return;
        }
        int prefix_length = 0; //当他是一个指针
        int i=1;
        while(i < n) {
            if(s[prefix_length] == s[i]) {
                prefix_length++;
                next[i++] = prefix_length;
            }
            else {
                if(prefix_length == 0) {
                    next[i++] = 0;
                }
                else {
                    prefix_length = next[prefix_length-1];
                }
            }
        }
    }
    
    int strStr(string haystack, string needle) {
        int n = haystack.size();
        int m = needle.size();
        vector<int> next(m);
        buildNext(next, needle);
        int j = 0;
        int i = 0;
        while(i<n) {
            if(haystack[i] == needle[j]) {
                i++;
                j++;
            }
            else if(j > 0){
                j = next[j-1];
            }
            else {
                i++;
            }
            if(j == m) {
                return i-m;
            }
        }
        return -1;
    }
